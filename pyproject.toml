[project]
name = "pkgps"
description = "Package coordinates as types."
authors = [
    {name = "Ryan Smith", email = "ryan.d.smith.106@gmail.com"},
]
dependencies = [
    "attrs>=24.2.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "MIT"}
dynamic = ["version"]

[project.optional-dependencies]
pydantic = ["pydantic"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.scripts]
format-check = "ruff format --check --config ./pyproject.toml src/ tests/"
format = "ruff format --config ./pyproject.toml src/ tests/"
lint-check = "ruff check --config ./pyproject.toml src/ tests/"
lint = "ruff check --fix --config ./pyproject.toml src/ tests/"
type-check = "mypy --config-file ./pyproject.toml src/"
vuln-check = "bandit -rc pyproject.toml src/ tests/"
verify = {composite = ["lint", "format", "type-check", "vuln-check"]}

[tool.pdm.version]
fallback_version = "0.0.0"
source = "scm"
write_template = "__version__: str = \"{}\"\n"
write_to = "pkgps/version.py"

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.6.4",
    "bandit>=1.7.5",
    "mypy>=1.4.1",
]

[tool.bandit]
exclude_dirs = [".venv", ".*_cache", ".pdm-build", "docs", "htmlcov", ".gitlab"]

# B101: Test for use of assert
[tool.bandit.assert_used]
skips = ["*_test.py", "*test_*.py"]

[tool.mypy]
python_version = "3.9"
exclude = '\.venv\.*'
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = false
check_untyped_defs = true
disallow_subclassing_any = true
strict_optional = true
no_implicit_optional = true
disallow_any_generics = true
disallow_any_unimported = true
warn_redundant_casts = true
warn_unused_configs = true
warn_no_return = true
warn_unreachable = true
show_traceback = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4

target-version = "py39"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
# From: https://docs.astral.sh/ruff/configuration/
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
extend-select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "F", # pyflakes
    "FA", # flake8-future-annotations
    "G", # flake8-logging-format
    "I", # isort-like imports
    "N", # pep8-naming
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PGH", # pygrep-hooks
    "PTH", # flake8-pathlib
    "RET", # flake8-return
    "RUF", # ruff
    "SIM", # flake8-simplify
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
ignore = [
    # Ignore: ruff N818
    # Reason: Sometimes we care if an error type ends with `Error`
    #  but sometimes the name is better without it.
    "N818"
]

fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Rules taken from: https://docs.astral.sh/ruff/configuration/
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
